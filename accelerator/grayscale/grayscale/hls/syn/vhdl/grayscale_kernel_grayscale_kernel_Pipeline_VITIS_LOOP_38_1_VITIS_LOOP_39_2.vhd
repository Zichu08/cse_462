-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity grayscale_kernel_grayscale_kernel_Pipeline_VITIS_LOOP_38_1_VITIS_LOOP_39_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_stream_TVALID : IN STD_LOGIC;
    output_stream_TREADY : IN STD_LOGIC;
    mul_ln12 : IN STD_LOGIC_VECTOR (61 downto 0);
    width : IN STD_LOGIC_VECTOR (31 downto 0);
    sub : IN STD_LOGIC_VECTOR (31 downto 0);
    input_stream_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    input_stream_TREADY : OUT STD_LOGIC;
    input_stream_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    input_stream_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    input_stream_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    sub22 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_stream_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_stream_TVALID : OUT STD_LOGIC;
    output_stream_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    output_stream_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    output_stream_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of grayscale_kernel_grayscale_kernel_Pipeline_VITIS_LOOP_38_1_VITIS_LOOP_39_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv62_0 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3E59B3D0 : STD_LOGIC_VECTOR (31 downto 0) := "00111110010110011011001111010000";
    constant ap_const_lv32_3F371759 : STD_LOGIC_VECTOR (31 downto 0) := "00111111001101110001011101011001";
    constant ap_const_lv32_3D93DD98 : STD_LOGIC_VECTOR (31 downto 0) := "00111101100100111101110110011000";
    constant ap_const_lv62_1 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv9_181 : STD_LOGIC_VECTOR (8 downto 0) := "110000001";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter23 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter24 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln38_fu_218_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal input_stream_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_grp1 : BOOLEAN;
    signal output_stream_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_11001_grp0 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone_grp0 : BOOLEAN;
    signal ap_block_pp0_stage0_11001_grp1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal pixel_keep_reg_564 : STD_LOGIC_VECTOR (3 downto 0);
    signal pixel_keep_reg_564_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal pixel_keep_reg_564_pp0_iter4_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal pixel_keep_reg_564_pp0_iter5_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal pixel_keep_reg_564_pp0_iter6_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal pixel_keep_reg_564_pp0_iter7_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal pixel_keep_reg_564_pp0_iter8_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal pixel_keep_reg_564_pp0_iter9_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal pixel_keep_reg_564_pp0_iter10_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal pixel_keep_reg_564_pp0_iter11_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal pixel_keep_reg_564_pp0_iter12_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal pixel_keep_reg_564_pp0_iter13_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal pixel_keep_reg_564_pp0_iter14_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal pixel_keep_reg_564_pp0_iter15_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal pixel_keep_reg_564_pp0_iter16_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal pixel_keep_reg_564_pp0_iter17_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal pixel_keep_reg_564_pp0_iter18_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal pixel_keep_reg_564_pp0_iter19_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal pixel_keep_reg_564_pp0_iter20_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal pixel_keep_reg_564_pp0_iter21_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal pixel_keep_reg_564_pp0_iter22_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal pixel_keep_reg_564_pp0_iter23_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal pixel_strb_reg_569 : STD_LOGIC_VECTOR (3 downto 0);
    signal pixel_strb_reg_569_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal pixel_strb_reg_569_pp0_iter4_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal pixel_strb_reg_569_pp0_iter5_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal pixel_strb_reg_569_pp0_iter6_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal pixel_strb_reg_569_pp0_iter7_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal pixel_strb_reg_569_pp0_iter8_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal pixel_strb_reg_569_pp0_iter9_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal pixel_strb_reg_569_pp0_iter10_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal pixel_strb_reg_569_pp0_iter11_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal pixel_strb_reg_569_pp0_iter12_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal pixel_strb_reg_569_pp0_iter13_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal pixel_strb_reg_569_pp0_iter14_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal pixel_strb_reg_569_pp0_iter15_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal pixel_strb_reg_569_pp0_iter16_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal pixel_strb_reg_569_pp0_iter17_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal pixel_strb_reg_569_pp0_iter18_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal pixel_strb_reg_569_pp0_iter19_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal pixel_strb_reg_569_pp0_iter20_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal pixel_strb_reg_569_pp0_iter21_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal pixel_strb_reg_569_pp0_iter22_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal pixel_strb_reg_569_pp0_iter23_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_2_reg_584 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_reg_584_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_reg_584_pp0_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_reg_584_pp0_iter5_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_reg_584_pp0_iter6_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_191_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_reg_589 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_194_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal g_reg_594 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_176_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_reg_604 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_181_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul1_reg_609 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_197_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_reg_614 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_168_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_reg_619 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_186_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul2_reg_624 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_172_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal gray_value_reg_629 : STD_LOGIC_VECTOR (31 downto 0);
    signal xs_sign_reg_634 : STD_LOGIC_VECTOR (0 downto 0);
    signal xs_sign_reg_634_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln342_fu_299_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal trunc_ln342_reg_639 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_fu_313_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_644 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln18_fu_331_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln18_reg_649 : STD_LOGIC_VECTOR (8 downto 0);
    signal val_fu_441_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal val_reg_654 : STD_LOGIC_VECTOR (31 downto 0);
    signal pixel_last_fu_453_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal pixel_last_reg_660 : STD_LOGIC_VECTOR (0 downto 0);
    signal col_fu_104 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    signal col_1_fu_465_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal row_fu_108 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    signal select_ln38_fu_360_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal indvar_flatten_fu_112 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000000000000000000000";
    signal add_ln38_fu_223_p2 : STD_LOGIC_VECTOR (61 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage0_01001_grp1 : BOOLEAN;
    signal grp_fu_191_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_194_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_197_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln45_fu_246_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_fu_255_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal data_fu_280_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal xs_exp_fu_291_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln317_fu_303_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln317_fu_307_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln18_fu_321_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln18_fu_327_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln39_fu_345_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln39_fu_349_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln38_1_fu_354_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln38_1_fu_372_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln38_fu_368_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mantissa_fu_389_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal sext_ln18_1_fu_402_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln15_fu_398_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal zext_ln18_fu_405_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal lshr_ln18_fu_409_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal shl_ln18_fu_415_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal tmp_3_fu_421_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_431_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln38_1_cast_fu_380_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal cmp21_fu_384_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_fu_448_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln39_fu_459_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal result_2_fu_483_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_fu_488_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln50_fu_494_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln50_fu_506_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln50_1_fu_500_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_168_ce : STD_LOGIC;
    signal grp_fu_172_ce : STD_LOGIC;
    signal grp_fu_176_ce : STD_LOGIC;
    signal grp_fu_181_ce : STD_LOGIC;
    signal grp_fu_186_ce : STD_LOGIC;
    signal grp_fu_191_ce : STD_LOGIC;
    signal grp_fu_194_ce : STD_LOGIC;
    signal grp_fu_197_ce : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter13_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter14_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter15_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter16_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter17_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter18_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter19_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter20_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter21_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter22_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter23_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component grayscale_kernel_fadd_32ns_32ns_32_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component grayscale_kernel_fmul_32ns_32ns_32_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component grayscale_kernel_uitofp_32ns_32_6_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component grayscale_kernel_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    fadd_32ns_32ns_32_5_full_dsp_1_U1 : component grayscale_kernel_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => mul_reg_604,
        din1 => mul1_reg_609,
        ce => grp_fu_168_ce,
        dout => grp_fu_168_p2);

    fadd_32ns_32ns_32_5_full_dsp_1_U2 : component grayscale_kernel_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => add_reg_619,
        din1 => mul2_reg_624,
        ce => grp_fu_172_ce,
        dout => grp_fu_172_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U3 : component grayscale_kernel_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => r_reg_589,
        din1 => ap_const_lv32_3E59B3D0,
        ce => grp_fu_176_ce,
        dout => grp_fu_176_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U4 : component grayscale_kernel_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => g_reg_594,
        din1 => ap_const_lv32_3F371759,
        ce => grp_fu_181_ce,
        dout => grp_fu_181_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U5 : component grayscale_kernel_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => b_reg_614,
        din1 => ap_const_lv32_3D93DD98,
        ce => grp_fu_186_ce,
        dout => grp_fu_186_p2);

    uitofp_32ns_32_6_no_dsp_1_U6 : component grayscale_kernel_uitofp_32ns_32_6_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_191_p0,
        ce => grp_fu_191_ce,
        dout => grp_fu_191_p1);

    uitofp_32ns_32_6_no_dsp_1_U7 : component grayscale_kernel_uitofp_32ns_32_6_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_194_p0,
        ce => grp_fu_194_ce,
        dout => grp_fu_194_p1);

    uitofp_32ns_32_6_no_dsp_1_U8 : component grayscale_kernel_uitofp_32ns_32_6_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_197_p0,
        ce => grp_fu_197_ce,
        dout => grp_fu_197_p1);

    flow_control_loop_pipe_sequential_init_U : component grayscale_kernel_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter23_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter22 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter23 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter24 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    col_fu_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    col_fu_104 <= ap_const_lv31_0;
                elsif ((ap_enable_reg_pp0_iter23 = ap_const_logic_1)) then 
                    col_fu_104 <= col_1_fu_465_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_112 <= ap_const_lv62_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln38_fu_218_p2 = ap_const_lv1_0))) then 
                    indvar_flatten_fu_112 <= add_ln38_fu_223_p2;
                end if;
            end if; 
        end if;
    end process;

    row_fu_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    row_fu_108 <= ap_const_lv31_0;
                elsif ((ap_enable_reg_pp0_iter23 = ap_const_logic_1)) then 
                    row_fu_108 <= select_ln38_fu_360_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1)) then
                add_reg_619 <= grp_fu_168_p2;
                b_reg_614 <= grp_fu_197_p1;
                g_reg_594 <= grp_fu_194_p1;
                gray_value_reg_629 <= grp_fu_172_p2;
                mul1_reg_609 <= grp_fu_181_p2;
                mul2_reg_624 <= grp_fu_186_p2;
                mul_reg_604 <= grp_fu_176_p2;
                pixel_keep_reg_564 <= input_stream_TKEEP;
                pixel_keep_reg_564_pp0_iter10_reg <= pixel_keep_reg_564_pp0_iter9_reg;
                pixel_keep_reg_564_pp0_iter11_reg <= pixel_keep_reg_564_pp0_iter10_reg;
                pixel_keep_reg_564_pp0_iter12_reg <= pixel_keep_reg_564_pp0_iter11_reg;
                pixel_keep_reg_564_pp0_iter13_reg <= pixel_keep_reg_564_pp0_iter12_reg;
                pixel_keep_reg_564_pp0_iter14_reg <= pixel_keep_reg_564_pp0_iter13_reg;
                pixel_keep_reg_564_pp0_iter15_reg <= pixel_keep_reg_564_pp0_iter14_reg;
                pixel_keep_reg_564_pp0_iter16_reg <= pixel_keep_reg_564_pp0_iter15_reg;
                pixel_keep_reg_564_pp0_iter17_reg <= pixel_keep_reg_564_pp0_iter16_reg;
                pixel_keep_reg_564_pp0_iter18_reg <= pixel_keep_reg_564_pp0_iter17_reg;
                pixel_keep_reg_564_pp0_iter19_reg <= pixel_keep_reg_564_pp0_iter18_reg;
                pixel_keep_reg_564_pp0_iter20_reg <= pixel_keep_reg_564_pp0_iter19_reg;
                pixel_keep_reg_564_pp0_iter21_reg <= pixel_keep_reg_564_pp0_iter20_reg;
                pixel_keep_reg_564_pp0_iter22_reg <= pixel_keep_reg_564_pp0_iter21_reg;
                pixel_keep_reg_564_pp0_iter23_reg <= pixel_keep_reg_564_pp0_iter22_reg;
                pixel_keep_reg_564_pp0_iter3_reg <= pixel_keep_reg_564;
                pixel_keep_reg_564_pp0_iter4_reg <= pixel_keep_reg_564_pp0_iter3_reg;
                pixel_keep_reg_564_pp0_iter5_reg <= pixel_keep_reg_564_pp0_iter4_reg;
                pixel_keep_reg_564_pp0_iter6_reg <= pixel_keep_reg_564_pp0_iter5_reg;
                pixel_keep_reg_564_pp0_iter7_reg <= pixel_keep_reg_564_pp0_iter6_reg;
                pixel_keep_reg_564_pp0_iter8_reg <= pixel_keep_reg_564_pp0_iter7_reg;
                pixel_keep_reg_564_pp0_iter9_reg <= pixel_keep_reg_564_pp0_iter8_reg;
                pixel_last_reg_660 <= pixel_last_fu_453_p2;
                pixel_strb_reg_569 <= input_stream_TSTRB;
                pixel_strb_reg_569_pp0_iter10_reg <= pixel_strb_reg_569_pp0_iter9_reg;
                pixel_strb_reg_569_pp0_iter11_reg <= pixel_strb_reg_569_pp0_iter10_reg;
                pixel_strb_reg_569_pp0_iter12_reg <= pixel_strb_reg_569_pp0_iter11_reg;
                pixel_strb_reg_569_pp0_iter13_reg <= pixel_strb_reg_569_pp0_iter12_reg;
                pixel_strb_reg_569_pp0_iter14_reg <= pixel_strb_reg_569_pp0_iter13_reg;
                pixel_strb_reg_569_pp0_iter15_reg <= pixel_strb_reg_569_pp0_iter14_reg;
                pixel_strb_reg_569_pp0_iter16_reg <= pixel_strb_reg_569_pp0_iter15_reg;
                pixel_strb_reg_569_pp0_iter17_reg <= pixel_strb_reg_569_pp0_iter16_reg;
                pixel_strb_reg_569_pp0_iter18_reg <= pixel_strb_reg_569_pp0_iter17_reg;
                pixel_strb_reg_569_pp0_iter19_reg <= pixel_strb_reg_569_pp0_iter18_reg;
                pixel_strb_reg_569_pp0_iter20_reg <= pixel_strb_reg_569_pp0_iter19_reg;
                pixel_strb_reg_569_pp0_iter21_reg <= pixel_strb_reg_569_pp0_iter20_reg;
                pixel_strb_reg_569_pp0_iter22_reg <= pixel_strb_reg_569_pp0_iter21_reg;
                pixel_strb_reg_569_pp0_iter23_reg <= pixel_strb_reg_569_pp0_iter22_reg;
                pixel_strb_reg_569_pp0_iter3_reg <= pixel_strb_reg_569;
                pixel_strb_reg_569_pp0_iter4_reg <= pixel_strb_reg_569_pp0_iter3_reg;
                pixel_strb_reg_569_pp0_iter5_reg <= pixel_strb_reg_569_pp0_iter4_reg;
                pixel_strb_reg_569_pp0_iter6_reg <= pixel_strb_reg_569_pp0_iter5_reg;
                pixel_strb_reg_569_pp0_iter7_reg <= pixel_strb_reg_569_pp0_iter6_reg;
                pixel_strb_reg_569_pp0_iter8_reg <= pixel_strb_reg_569_pp0_iter7_reg;
                pixel_strb_reg_569_pp0_iter9_reg <= pixel_strb_reg_569_pp0_iter8_reg;
                r_reg_589 <= grp_fu_191_p1;
                select_ln18_reg_649 <= select_ln18_fu_331_p3;
                tmp_2_reg_584 <= input_stream_TDATA(23 downto 16);
                tmp_2_reg_584_pp0_iter3_reg <= tmp_2_reg_584;
                tmp_2_reg_584_pp0_iter4_reg <= tmp_2_reg_584_pp0_iter3_reg;
                tmp_2_reg_584_pp0_iter5_reg <= tmp_2_reg_584_pp0_iter4_reg;
                tmp_2_reg_584_pp0_iter6_reg <= tmp_2_reg_584_pp0_iter5_reg;
                tmp_reg_644 <= add_ln317_fu_307_p2(8 downto 8);
                trunc_ln342_reg_639 <= trunc_ln342_fu_299_p1;
                val_reg_654 <= val_fu_441_p3;
                xs_sign_reg_634 <= data_fu_280_p1(31 downto 31);
                xs_sign_reg_634_pp0_iter23_reg <= xs_sign_reg_634;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
                ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
                ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
                ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
                ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
                ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
                ap_loop_exit_ready_pp0_iter18_reg <= ap_loop_exit_ready_pp0_iter17_reg;
                ap_loop_exit_ready_pp0_iter19_reg <= ap_loop_exit_ready_pp0_iter18_reg;
                ap_loop_exit_ready_pp0_iter20_reg <= ap_loop_exit_ready_pp0_iter19_reg;
                ap_loop_exit_ready_pp0_iter21_reg <= ap_loop_exit_ready_pp0_iter20_reg;
                ap_loop_exit_ready_pp0_iter22_reg <= ap_loop_exit_ready_pp0_iter21_reg;
                ap_loop_exit_ready_pp0_iter23_reg <= ap_loop_exit_ready_pp0_iter22_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln317_fu_307_p2 <= std_logic_vector(unsigned(zext_ln317_fu_303_p1) + unsigned(ap_const_lv9_181));
    add_ln38_1_fu_354_p2 <= std_logic_vector(unsigned(row_fu_108) + unsigned(ap_const_lv31_1));
    add_ln38_fu_223_p2 <= std_logic_vector(unsigned(indvar_flatten_fu_112) + unsigned(ap_const_lv62_1));
    add_ln39_fu_459_p2 <= std_logic_vector(unsigned(col_fu_104) + unsigned(ap_const_lv31_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_grp1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter24, input_stream_TVALID, output_stream_TREADY)
    begin
                ap_block_pp0_stage0_01001_grp1 <= (((output_stream_TREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter24 = ap_const_logic_1)) or ((input_stream_TVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter24, input_stream_TVALID, output_stream_TREADY)
    begin
                ap_block_pp0_stage0_11001 <= (((output_stream_TREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter24 = ap_const_logic_1)) or ((input_stream_TVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)));
    end process;

        ap_block_pp0_stage0_11001_grp0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_grp1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter24, input_stream_TVALID, output_stream_TREADY)
    begin
                ap_block_pp0_stage0_11001_grp1 <= (((output_stream_TREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter24 = ap_const_logic_1)) or ((input_stream_TVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)));
    end process;

        ap_block_pp0_stage0_grp1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter24, input_stream_TVALID, output_stream_TREADY)
    begin
                ap_block_pp0_stage0_subdone <= (((output_stream_TREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter24 = ap_const_logic_1)) or ((input_stream_TVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)));
    end process;

        ap_block_pp0_stage0_subdone_grp0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln38_fu_218_p2)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln38_fu_218_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter23_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter23_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24)
    begin
        if (((ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) 
    and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    cmp21_fu_384_p2 <= "1" when (zext_ln38_fu_368_p1 = sub) else "0";
    col_1_fu_465_p3 <= 
        add_ln39_fu_459_p2 when (icmp_ln39_fu_349_p2(0) = '1') else 
        ap_const_lv31_1;
    data_fu_280_p1 <= gray_value_reg_629;

    grp_fu_168_ce_assign_proc : process(ap_block_pp0_stage0_11001_grp1)
    begin
        if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1)) then 
            grp_fu_168_ce <= ap_const_logic_1;
        else 
            grp_fu_168_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_172_ce_assign_proc : process(ap_block_pp0_stage0_11001_grp1)
    begin
        if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1)) then 
            grp_fu_172_ce <= ap_const_logic_1;
        else 
            grp_fu_172_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_176_ce_assign_proc : process(ap_block_pp0_stage0_11001_grp1)
    begin
        if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1)) then 
            grp_fu_176_ce <= ap_const_logic_1;
        else 
            grp_fu_176_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_181_ce_assign_proc : process(ap_block_pp0_stage0_11001_grp1)
    begin
        if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1)) then 
            grp_fu_181_ce <= ap_const_logic_1;
        else 
            grp_fu_181_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_186_ce_assign_proc : process(ap_block_pp0_stage0_11001_grp1)
    begin
        if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1)) then 
            grp_fu_186_ce <= ap_const_logic_1;
        else 
            grp_fu_186_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_191_ce_assign_proc : process(ap_block_pp0_stage0_11001_grp1)
    begin
        if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1)) then 
            grp_fu_191_ce <= ap_const_logic_1;
        else 
            grp_fu_191_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_191_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln45_fu_246_p1),32));

    grp_fu_194_ce_assign_proc : process(ap_block_pp0_stage0_11001_grp1)
    begin
        if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1)) then 
            grp_fu_194_ce <= ap_const_logic_1;
        else 
            grp_fu_194_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_194_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_255_p3),32));

    grp_fu_197_ce_assign_proc : process(ap_block_pp0_stage0_11001_grp1)
    begin
        if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1)) then 
            grp_fu_197_ce <= ap_const_logic_1;
        else 
            grp_fu_197_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_197_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_reg_584_pp0_iter6_reg),32));
    icmp_ln38_fu_218_p2 <= "1" when (indvar_flatten_fu_112 = mul_ln12) else "0";
    icmp_ln39_fu_349_p2 <= "1" when (signed(zext_ln39_fu_345_p1) < signed(width)) else "0";
    icmp_ln52_fu_448_p2 <= "1" when (select_ln38_1_cast_fu_380_p1 = sub22) else "0";

    input_stream_TDATA_blk_n_assign_proc : process(ap_enable_reg_pp0_iter2, input_stream_TVALID, ap_block_pp0_stage0_grp1)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_grp1))) then 
            input_stream_TDATA_blk_n <= input_stream_TVALID;
        else 
            input_stream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    input_stream_TREADY_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1))) then 
            input_stream_TREADY <= ap_const_logic_1;
        else 
            input_stream_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    lshr_ln18_fu_409_p2 <= std_logic_vector(shift_right(unsigned(zext_ln15_fu_398_p1),to_integer(unsigned('0' & zext_ln18_fu_405_p1(31-1 downto 0)))));
    mantissa_fu_389_p4 <= ((ap_const_lv1_1 & trunc_ln342_reg_639) & ap_const_lv1_0);
    or_ln50_fu_506_p2 <= (shl_ln50_fu_494_p2 or result_fu_488_p3);
    output_stream_TDATA <= (shl_ln50_1_fu_500_p2 or or_ln50_fu_506_p2);

    output_stream_TDATA_blk_n_assign_proc : process(ap_enable_reg_pp0_iter24, output_stream_TREADY, ap_block_pp0_stage0_grp1)
    begin
        if (((ap_enable_reg_pp0_iter24 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_grp1))) then 
            output_stream_TDATA_blk_n <= output_stream_TREADY;
        else 
            output_stream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    output_stream_TKEEP <= pixel_keep_reg_564_pp0_iter23_reg;
    output_stream_TLAST <= pixel_last_reg_660;
    output_stream_TSTRB <= pixel_strb_reg_569_pp0_iter23_reg;

    output_stream_TVALID_assign_proc : process(ap_enable_reg_pp0_iter24, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_enable_reg_pp0_iter24 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1))) then 
            output_stream_TVALID <= ap_const_logic_1;
        else 
            output_stream_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    pixel_last_fu_453_p2 <= (icmp_ln52_fu_448_p2 and cmp21_fu_384_p2);
    result_2_fu_483_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(val_reg_654));
    result_fu_488_p3 <= 
        result_2_fu_483_p2 when (xs_sign_reg_634_pp0_iter23_reg(0) = '1') else 
        val_reg_654;
    select_ln18_fu_331_p3 <= 
        sext_ln18_fu_327_p1 when (tmp_fu_313_p3(0) = '1') else 
        add_ln317_fu_307_p2;
    select_ln38_1_cast_fu_380_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln38_1_fu_372_p3),32));
    select_ln38_1_fu_372_p3 <= 
        col_fu_104 when (icmp_ln39_fu_349_p2(0) = '1') else 
        ap_const_lv31_0;
    select_ln38_fu_360_p3 <= 
        row_fu_108 when (icmp_ln39_fu_349_p2(0) = '1') else 
        add_ln38_1_fu_354_p2;
        sext_ln18_1_fu_402_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln18_reg_649),32));

        sext_ln18_fu_327_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln18_fu_321_p2),9));

    shl_ln18_fu_415_p2 <= std_logic_vector(shift_left(unsigned(zext_ln15_fu_398_p1),to_integer(unsigned('0' & zext_ln18_fu_405_p1(31-1 downto 0)))));
    shl_ln50_1_fu_500_p2 <= std_logic_vector(shift_left(unsigned(result_fu_488_p3),to_integer(unsigned('0' & ap_const_lv32_8(31-1 downto 0)))));
    shl_ln50_fu_494_p2 <= std_logic_vector(shift_left(unsigned(result_fu_488_p3),to_integer(unsigned('0' & ap_const_lv32_10(31-1 downto 0)))));
    sub_ln18_fu_321_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(xs_exp_fu_291_p3));
    tmp_1_fu_255_p3 <= input_stream_TDATA(15 downto 8);
    tmp_3_fu_421_p4 <= lshr_ln18_fu_409_p2(55 downto 24);
    tmp_4_fu_431_p4 <= shl_ln18_fu_415_p2(55 downto 24);
    tmp_fu_313_p3 <= add_ln317_fu_307_p2(8 downto 8);
    trunc_ln342_fu_299_p1 <= data_fu_280_p1(23 - 1 downto 0);
    trunc_ln45_fu_246_p1 <= input_stream_TDATA(8 - 1 downto 0);
    val_fu_441_p3 <= 
        tmp_3_fu_421_p4 when (tmp_reg_644(0) = '1') else 
        tmp_4_fu_431_p4;
    xs_exp_fu_291_p3 <= data_fu_280_p1(30 downto 23);
    zext_ln15_fu_398_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_fu_389_p4),79));
    zext_ln18_fu_405_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln18_1_fu_402_p1),79));
    zext_ln317_fu_303_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xs_exp_fu_291_p3),9));
    zext_ln38_fu_368_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln38_fu_360_p3),32));
    zext_ln39_fu_345_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_fu_104),32));
end behav;
