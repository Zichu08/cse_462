// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module grayscale_kernel_grayscale_kernel_Pipeline_VITIS_LOOP_38_1_VITIS_LOOP_39_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_stream_TVALID,
        output_stream_TREADY,
        mul_ln12,
        width,
        sub,
        input_stream_TDATA,
        input_stream_TREADY,
        input_stream_TKEEP,
        input_stream_TSTRB,
        input_stream_TLAST,
        sub22,
        output_stream_TDATA,
        output_stream_TVALID,
        output_stream_TKEEP,
        output_stream_TSTRB,
        output_stream_TLAST
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   input_stream_TVALID;
input   output_stream_TREADY;
input  [61:0] mul_ln12;
input  [31:0] width;
input  [31:0] sub;
input  [31:0] input_stream_TDATA;
output   input_stream_TREADY;
input  [3:0] input_stream_TKEEP;
input  [3:0] input_stream_TSTRB;
input  [0:0] input_stream_TLAST;
input  [31:0] sub22;
output  [31:0] output_stream_TDATA;
output   output_stream_TVALID;
output  [3:0] output_stream_TKEEP;
output  [3:0] output_stream_TSTRB;
output  [0:0] output_stream_TLAST;

reg ap_idle;
reg input_stream_TREADY;
reg output_stream_TVALID;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_enable_reg_pp0_iter17;
reg    ap_enable_reg_pp0_iter18;
reg    ap_enable_reg_pp0_iter19;
reg    ap_enable_reg_pp0_iter20;
reg    ap_enable_reg_pp0_iter21;
reg    ap_enable_reg_pp0_iter22;
reg    ap_enable_reg_pp0_iter23;
reg    ap_enable_reg_pp0_iter24;
reg    ap_idle_pp0;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln38_fu_218_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    input_stream_TDATA_blk_n;
wire    ap_block_pp0_stage0_grp1;
reg    output_stream_TDATA_blk_n;
wire    ap_block_pp0_stage0_11001_grp0;
wire    ap_block_pp0_stage0_subdone_grp0;
reg    ap_block_pp0_stage0_11001_grp1;
reg    ap_block_pp0_stage0_11001;
reg   [3:0] pixel_keep_reg_564;
reg   [3:0] pixel_keep_reg_564_pp0_iter3_reg;
reg   [3:0] pixel_keep_reg_564_pp0_iter4_reg;
reg   [3:0] pixel_keep_reg_564_pp0_iter5_reg;
reg   [3:0] pixel_keep_reg_564_pp0_iter6_reg;
reg   [3:0] pixel_keep_reg_564_pp0_iter7_reg;
reg   [3:0] pixel_keep_reg_564_pp0_iter8_reg;
reg   [3:0] pixel_keep_reg_564_pp0_iter9_reg;
reg   [3:0] pixel_keep_reg_564_pp0_iter10_reg;
reg   [3:0] pixel_keep_reg_564_pp0_iter11_reg;
reg   [3:0] pixel_keep_reg_564_pp0_iter12_reg;
reg   [3:0] pixel_keep_reg_564_pp0_iter13_reg;
reg   [3:0] pixel_keep_reg_564_pp0_iter14_reg;
reg   [3:0] pixel_keep_reg_564_pp0_iter15_reg;
reg   [3:0] pixel_keep_reg_564_pp0_iter16_reg;
reg   [3:0] pixel_keep_reg_564_pp0_iter17_reg;
reg   [3:0] pixel_keep_reg_564_pp0_iter18_reg;
reg   [3:0] pixel_keep_reg_564_pp0_iter19_reg;
reg   [3:0] pixel_keep_reg_564_pp0_iter20_reg;
reg   [3:0] pixel_keep_reg_564_pp0_iter21_reg;
reg   [3:0] pixel_keep_reg_564_pp0_iter22_reg;
reg   [3:0] pixel_keep_reg_564_pp0_iter23_reg;
reg   [3:0] pixel_strb_reg_569;
reg   [3:0] pixel_strb_reg_569_pp0_iter3_reg;
reg   [3:0] pixel_strb_reg_569_pp0_iter4_reg;
reg   [3:0] pixel_strb_reg_569_pp0_iter5_reg;
reg   [3:0] pixel_strb_reg_569_pp0_iter6_reg;
reg   [3:0] pixel_strb_reg_569_pp0_iter7_reg;
reg   [3:0] pixel_strb_reg_569_pp0_iter8_reg;
reg   [3:0] pixel_strb_reg_569_pp0_iter9_reg;
reg   [3:0] pixel_strb_reg_569_pp0_iter10_reg;
reg   [3:0] pixel_strb_reg_569_pp0_iter11_reg;
reg   [3:0] pixel_strb_reg_569_pp0_iter12_reg;
reg   [3:0] pixel_strb_reg_569_pp0_iter13_reg;
reg   [3:0] pixel_strb_reg_569_pp0_iter14_reg;
reg   [3:0] pixel_strb_reg_569_pp0_iter15_reg;
reg   [3:0] pixel_strb_reg_569_pp0_iter16_reg;
reg   [3:0] pixel_strb_reg_569_pp0_iter17_reg;
reg   [3:0] pixel_strb_reg_569_pp0_iter18_reg;
reg   [3:0] pixel_strb_reg_569_pp0_iter19_reg;
reg   [3:0] pixel_strb_reg_569_pp0_iter20_reg;
reg   [3:0] pixel_strb_reg_569_pp0_iter21_reg;
reg   [3:0] pixel_strb_reg_569_pp0_iter22_reg;
reg   [3:0] pixel_strb_reg_569_pp0_iter23_reg;
reg   [7:0] tmp_2_reg_584;
reg   [7:0] tmp_2_reg_584_pp0_iter3_reg;
reg   [7:0] tmp_2_reg_584_pp0_iter4_reg;
reg   [7:0] tmp_2_reg_584_pp0_iter5_reg;
reg   [7:0] tmp_2_reg_584_pp0_iter6_reg;
wire   [31:0] grp_fu_191_p1;
reg   [31:0] r_reg_589;
wire   [31:0] grp_fu_194_p1;
reg   [31:0] g_reg_594;
wire   [31:0] grp_fu_176_p2;
reg   [31:0] mul_reg_604;
wire   [31:0] grp_fu_181_p2;
reg   [31:0] mul1_reg_609;
wire   [31:0] grp_fu_197_p1;
reg   [31:0] b_reg_614;
wire   [31:0] grp_fu_168_p2;
reg   [31:0] add_reg_619;
wire   [31:0] grp_fu_186_p2;
reg   [31:0] mul2_reg_624;
wire   [31:0] grp_fu_172_p2;
reg   [31:0] gray_value_reg_629;
reg   [0:0] xs_sign_reg_634;
reg   [0:0] xs_sign_reg_634_pp0_iter23_reg;
wire   [22:0] trunc_ln342_fu_299_p1;
reg   [22:0] trunc_ln342_reg_639;
wire   [0:0] tmp_fu_313_p3;
reg   [0:0] tmp_reg_644;
wire   [8:0] select_ln18_fu_331_p3;
reg   [8:0] select_ln18_reg_649;
wire   [31:0] val_fu_441_p3;
reg   [31:0] val_reg_654;
wire   [0:0] pixel_last_fu_453_p2;
reg   [0:0] pixel_last_reg_660;
reg   [30:0] col_fu_104;
wire   [30:0] col_1_fu_465_p3;
wire    ap_loop_init;
reg   [30:0] row_fu_108;
wire   [30:0] select_ln38_fu_360_p3;
reg   [61:0] indvar_flatten_fu_112;
wire   [61:0] add_ln38_fu_223_p2;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_01001_grp1;
wire   [31:0] grp_fu_191_p0;
wire   [31:0] grp_fu_194_p0;
wire   [31:0] grp_fu_197_p0;
wire   [7:0] trunc_ln45_fu_246_p1;
wire   [7:0] tmp_1_fu_255_p3;
wire   [31:0] data_fu_280_p1;
wire   [7:0] xs_exp_fu_291_p3;
wire   [8:0] zext_ln317_fu_303_p1;
wire   [8:0] add_ln317_fu_307_p2;
wire   [7:0] sub_ln18_fu_321_p2;
wire  signed [8:0] sext_ln18_fu_327_p1;
wire   [31:0] zext_ln39_fu_345_p1;
wire   [0:0] icmp_ln39_fu_349_p2;
wire   [30:0] add_ln38_1_fu_354_p2;
wire   [30:0] select_ln38_1_fu_372_p3;
wire   [31:0] zext_ln38_fu_368_p1;
wire   [24:0] mantissa_fu_389_p4;
wire  signed [31:0] sext_ln18_1_fu_402_p1;
wire   [78:0] zext_ln15_fu_398_p1;
wire   [78:0] zext_ln18_fu_405_p1;
wire   [78:0] lshr_ln18_fu_409_p2;
wire   [78:0] shl_ln18_fu_415_p2;
wire   [31:0] tmp_3_fu_421_p4;
wire   [31:0] tmp_4_fu_431_p4;
wire   [31:0] select_ln38_1_cast_fu_380_p1;
wire   [0:0] cmp21_fu_384_p2;
wire   [0:0] icmp_ln52_fu_448_p2;
wire   [30:0] add_ln39_fu_459_p2;
wire   [31:0] result_2_fu_483_p2;
wire   [31:0] result_fu_488_p3;
wire   [31:0] shl_ln50_fu_494_p2;
wire   [31:0] or_ln50_fu_506_p2;
wire   [31:0] shl_ln50_1_fu_500_p2;
reg    grp_fu_168_ce;
reg    grp_fu_172_ce;
reg    grp_fu_176_ce;
reg    grp_fu_181_ce;
reg    grp_fu_186_ce;
reg    grp_fu_191_ce;
reg    grp_fu_194_ce;
reg    grp_fu_197_ce;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg    ap_loop_exit_ready_pp0_iter10_reg;
reg    ap_loop_exit_ready_pp0_iter11_reg;
reg    ap_loop_exit_ready_pp0_iter12_reg;
reg    ap_loop_exit_ready_pp0_iter13_reg;
reg    ap_loop_exit_ready_pp0_iter14_reg;
reg    ap_loop_exit_ready_pp0_iter15_reg;
reg    ap_loop_exit_ready_pp0_iter16_reg;
reg    ap_loop_exit_ready_pp0_iter17_reg;
reg    ap_loop_exit_ready_pp0_iter18_reg;
reg    ap_loop_exit_ready_pp0_iter19_reg;
reg    ap_loop_exit_ready_pp0_iter20_reg;
reg    ap_loop_exit_ready_pp0_iter21_reg;
reg    ap_loop_exit_ready_pp0_iter22_reg;
reg    ap_loop_exit_ready_pp0_iter23_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter18 = 1'b0;
#0 ap_enable_reg_pp0_iter19 = 1'b0;
#0 ap_enable_reg_pp0_iter20 = 1'b0;
#0 ap_enable_reg_pp0_iter21 = 1'b0;
#0 ap_enable_reg_pp0_iter22 = 1'b0;
#0 ap_enable_reg_pp0_iter23 = 1'b0;
#0 ap_enable_reg_pp0_iter24 = 1'b0;
#0 col_fu_104 = 31'd0;
#0 row_fu_108 = 31'd0;
#0 indvar_flatten_fu_112 = 62'd0;
#0 ap_done_reg = 1'b0;
end

grayscale_kernel_fadd_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_5_full_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(mul_reg_604),
    .din1(mul1_reg_609),
    .ce(grp_fu_168_ce),
    .dout(grp_fu_168_p2)
);

grayscale_kernel_fadd_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_5_full_dsp_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(add_reg_619),
    .din1(mul2_reg_624),
    .ce(grp_fu_172_ce),
    .dout(grp_fu_172_p2)
);

grayscale_kernel_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(r_reg_589),
    .din1(32'd1046066128),
    .ce(grp_fu_176_ce),
    .dout(grp_fu_176_p2)
);

grayscale_kernel_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(g_reg_594),
    .din1(32'd1060575065),
    .ce(grp_fu_181_ce),
    .dout(grp_fu_181_p2)
);

grayscale_kernel_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(b_reg_614),
    .din1(32'd1033100696),
    .ce(grp_fu_186_ce),
    .dout(grp_fu_186_p2)
);

grayscale_kernel_uitofp_32ns_32_6_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
uitofp_32ns_32_6_no_dsp_1_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_191_p0),
    .ce(grp_fu_191_ce),
    .dout(grp_fu_191_p1)
);

grayscale_kernel_uitofp_32ns_32_6_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
uitofp_32ns_32_6_no_dsp_1_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_194_p0),
    .ce(grp_fu_194_ce),
    .dout(grp_fu_194_p1)
);

grayscale_kernel_uitofp_32ns_32_6_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
uitofp_32ns_32_6_no_dsp_1_U8(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_197_p0),
    .ce(grp_fu_197_ce),
    .dout(grp_fu_197_p1)
);

grayscale_kernel_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter23_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter19 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter20 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter21 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter22 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter23 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter24 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001_grp1)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            col_fu_104 <= 31'd0;
        end else if ((ap_enable_reg_pp0_iter23 == 1'b1)) begin
            col_fu_104 <= col_1_fu_465_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_112 <= 62'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln38_fu_218_p2 == 1'd0))) begin
            indvar_flatten_fu_112 <= add_ln38_fu_223_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001_grp1)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            row_fu_108 <= 31'd0;
        end else if ((ap_enable_reg_pp0_iter23 == 1'b1)) begin
            row_fu_108 <= select_ln38_fu_360_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001_grp1)) begin
        add_reg_619 <= grp_fu_168_p2;
        b_reg_614 <= grp_fu_197_p1;
        g_reg_594 <= grp_fu_194_p1;
        gray_value_reg_629 <= grp_fu_172_p2;
        mul1_reg_609 <= grp_fu_181_p2;
        mul2_reg_624 <= grp_fu_186_p2;
        mul_reg_604 <= grp_fu_176_p2;
        pixel_keep_reg_564 <= input_stream_TKEEP;
        pixel_keep_reg_564_pp0_iter10_reg <= pixel_keep_reg_564_pp0_iter9_reg;
        pixel_keep_reg_564_pp0_iter11_reg <= pixel_keep_reg_564_pp0_iter10_reg;
        pixel_keep_reg_564_pp0_iter12_reg <= pixel_keep_reg_564_pp0_iter11_reg;
        pixel_keep_reg_564_pp0_iter13_reg <= pixel_keep_reg_564_pp0_iter12_reg;
        pixel_keep_reg_564_pp0_iter14_reg <= pixel_keep_reg_564_pp0_iter13_reg;
        pixel_keep_reg_564_pp0_iter15_reg <= pixel_keep_reg_564_pp0_iter14_reg;
        pixel_keep_reg_564_pp0_iter16_reg <= pixel_keep_reg_564_pp0_iter15_reg;
        pixel_keep_reg_564_pp0_iter17_reg <= pixel_keep_reg_564_pp0_iter16_reg;
        pixel_keep_reg_564_pp0_iter18_reg <= pixel_keep_reg_564_pp0_iter17_reg;
        pixel_keep_reg_564_pp0_iter19_reg <= pixel_keep_reg_564_pp0_iter18_reg;
        pixel_keep_reg_564_pp0_iter20_reg <= pixel_keep_reg_564_pp0_iter19_reg;
        pixel_keep_reg_564_pp0_iter21_reg <= pixel_keep_reg_564_pp0_iter20_reg;
        pixel_keep_reg_564_pp0_iter22_reg <= pixel_keep_reg_564_pp0_iter21_reg;
        pixel_keep_reg_564_pp0_iter23_reg <= pixel_keep_reg_564_pp0_iter22_reg;
        pixel_keep_reg_564_pp0_iter3_reg <= pixel_keep_reg_564;
        pixel_keep_reg_564_pp0_iter4_reg <= pixel_keep_reg_564_pp0_iter3_reg;
        pixel_keep_reg_564_pp0_iter5_reg <= pixel_keep_reg_564_pp0_iter4_reg;
        pixel_keep_reg_564_pp0_iter6_reg <= pixel_keep_reg_564_pp0_iter5_reg;
        pixel_keep_reg_564_pp0_iter7_reg <= pixel_keep_reg_564_pp0_iter6_reg;
        pixel_keep_reg_564_pp0_iter8_reg <= pixel_keep_reg_564_pp0_iter7_reg;
        pixel_keep_reg_564_pp0_iter9_reg <= pixel_keep_reg_564_pp0_iter8_reg;
        pixel_last_reg_660 <= pixel_last_fu_453_p2;
        pixel_strb_reg_569 <= input_stream_TSTRB;
        pixel_strb_reg_569_pp0_iter10_reg <= pixel_strb_reg_569_pp0_iter9_reg;
        pixel_strb_reg_569_pp0_iter11_reg <= pixel_strb_reg_569_pp0_iter10_reg;
        pixel_strb_reg_569_pp0_iter12_reg <= pixel_strb_reg_569_pp0_iter11_reg;
        pixel_strb_reg_569_pp0_iter13_reg <= pixel_strb_reg_569_pp0_iter12_reg;
        pixel_strb_reg_569_pp0_iter14_reg <= pixel_strb_reg_569_pp0_iter13_reg;
        pixel_strb_reg_569_pp0_iter15_reg <= pixel_strb_reg_569_pp0_iter14_reg;
        pixel_strb_reg_569_pp0_iter16_reg <= pixel_strb_reg_569_pp0_iter15_reg;
        pixel_strb_reg_569_pp0_iter17_reg <= pixel_strb_reg_569_pp0_iter16_reg;
        pixel_strb_reg_569_pp0_iter18_reg <= pixel_strb_reg_569_pp0_iter17_reg;
        pixel_strb_reg_569_pp0_iter19_reg <= pixel_strb_reg_569_pp0_iter18_reg;
        pixel_strb_reg_569_pp0_iter20_reg <= pixel_strb_reg_569_pp0_iter19_reg;
        pixel_strb_reg_569_pp0_iter21_reg <= pixel_strb_reg_569_pp0_iter20_reg;
        pixel_strb_reg_569_pp0_iter22_reg <= pixel_strb_reg_569_pp0_iter21_reg;
        pixel_strb_reg_569_pp0_iter23_reg <= pixel_strb_reg_569_pp0_iter22_reg;
        pixel_strb_reg_569_pp0_iter3_reg <= pixel_strb_reg_569;
        pixel_strb_reg_569_pp0_iter4_reg <= pixel_strb_reg_569_pp0_iter3_reg;
        pixel_strb_reg_569_pp0_iter5_reg <= pixel_strb_reg_569_pp0_iter4_reg;
        pixel_strb_reg_569_pp0_iter6_reg <= pixel_strb_reg_569_pp0_iter5_reg;
        pixel_strb_reg_569_pp0_iter7_reg <= pixel_strb_reg_569_pp0_iter6_reg;
        pixel_strb_reg_569_pp0_iter8_reg <= pixel_strb_reg_569_pp0_iter7_reg;
        pixel_strb_reg_569_pp0_iter9_reg <= pixel_strb_reg_569_pp0_iter8_reg;
        r_reg_589 <= grp_fu_191_p1;
        select_ln18_reg_649 <= select_ln18_fu_331_p3;
        tmp_2_reg_584 <= {{input_stream_TDATA[23:16]}};
        tmp_2_reg_584_pp0_iter3_reg <= tmp_2_reg_584;
        tmp_2_reg_584_pp0_iter4_reg <= tmp_2_reg_584_pp0_iter3_reg;
        tmp_2_reg_584_pp0_iter5_reg <= tmp_2_reg_584_pp0_iter4_reg;
        tmp_2_reg_584_pp0_iter6_reg <= tmp_2_reg_584_pp0_iter5_reg;
        tmp_reg_644 <= add_ln317_fu_307_p2[32'd8];
        trunc_ln342_reg_639 <= trunc_ln342_fu_299_p1;
        val_reg_654 <= val_fu_441_p3;
        xs_sign_reg_634 <= data_fu_280_p1[32'd31];
        xs_sign_reg_634_pp0_iter23_reg <= xs_sign_reg_634;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
        ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
        ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
        ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
        ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
        ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
        ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
        ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
        ap_loop_exit_ready_pp0_iter18_reg <= ap_loop_exit_ready_pp0_iter17_reg;
        ap_loop_exit_ready_pp0_iter19_reg <= ap_loop_exit_ready_pp0_iter18_reg;
        ap_loop_exit_ready_pp0_iter20_reg <= ap_loop_exit_ready_pp0_iter19_reg;
        ap_loop_exit_ready_pp0_iter21_reg <= ap_loop_exit_ready_pp0_iter20_reg;
        ap_loop_exit_ready_pp0_iter22_reg <= ap_loop_exit_ready_pp0_iter21_reg;
        ap_loop_exit_ready_pp0_iter23_reg <= ap_loop_exit_ready_pp0_iter22_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln38_fu_218_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter23_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter24 == 1'b0) & (ap_enable_reg_pp0_iter23 == 1'b0) & (ap_enable_reg_pp0_iter22 == 1'b0) & (ap_enable_reg_pp0_iter21 == 1'b0) & (ap_enable_reg_pp0_iter20 == 1'b0) & (ap_enable_reg_pp0_iter19 == 1'b0) & (ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_block_pp0_stage0_11001_grp1)) begin
        grp_fu_168_ce = 1'b1;
    end else begin
        grp_fu_168_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_block_pp0_stage0_11001_grp1)) begin
        grp_fu_172_ce = 1'b1;
    end else begin
        grp_fu_172_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_block_pp0_stage0_11001_grp1)) begin
        grp_fu_176_ce = 1'b1;
    end else begin
        grp_fu_176_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_block_pp0_stage0_11001_grp1)) begin
        grp_fu_181_ce = 1'b1;
    end else begin
        grp_fu_181_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_block_pp0_stage0_11001_grp1)) begin
        grp_fu_186_ce = 1'b1;
    end else begin
        grp_fu_186_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_block_pp0_stage0_11001_grp1)) begin
        grp_fu_191_ce = 1'b1;
    end else begin
        grp_fu_191_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_block_pp0_stage0_11001_grp1)) begin
        grp_fu_194_ce = 1'b1;
    end else begin
        grp_fu_194_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_block_pp0_stage0_11001_grp1)) begin
        grp_fu_197_ce = 1'b1;
    end else begin
        grp_fu_197_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_grp1))) begin
        input_stream_TDATA_blk_n = input_stream_TVALID;
    end else begin
        input_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001_grp1))) begin
        input_stream_TREADY = 1'b1;
    end else begin
        input_stream_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter24 == 1'b1) & (1'b0 == ap_block_pp0_stage0_grp1))) begin
        output_stream_TDATA_blk_n = output_stream_TREADY;
    end else begin
        output_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter24 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001_grp1))) begin
        output_stream_TVALID = 1'b1;
    end else begin
        output_stream_TVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln317_fu_307_p2 = ($signed(zext_ln317_fu_303_p1) + $signed(9'd385));

assign add_ln38_1_fu_354_p2 = (row_fu_108 + 31'd1);

assign add_ln38_fu_223_p2 = (indvar_flatten_fu_112 + 62'd1);

assign add_ln39_fu_459_p2 = (col_fu_104 + 31'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001_grp1 = (((output_stream_TREADY == 1'b0) & (ap_enable_reg_pp0_iter24 == 1'b1)) | ((input_stream_TVALID == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((output_stream_TREADY == 1'b0) & (ap_enable_reg_pp0_iter24 == 1'b1)) | ((input_stream_TVALID == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)));
end

assign ap_block_pp0_stage0_11001_grp0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001_grp1 = (((output_stream_TREADY == 1'b0) & (ap_enable_reg_pp0_iter24 == 1'b1)) | ((input_stream_TVALID == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)));
end

assign ap_block_pp0_stage0_grp1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((output_stream_TREADY == 1'b0) & (ap_enable_reg_pp0_iter24 == 1'b1)) | ((input_stream_TVALID == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)));
end

assign ap_block_pp0_stage0_subdone_grp0 = ~(1'b1 == 1'b1);

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign ap_ready = ap_ready_sig;

assign cmp21_fu_384_p2 = ((zext_ln38_fu_368_p1 == sub) ? 1'b1 : 1'b0);

assign col_1_fu_465_p3 = ((icmp_ln39_fu_349_p2[0:0] == 1'b1) ? add_ln39_fu_459_p2 : 31'd1);

assign data_fu_280_p1 = gray_value_reg_629;

assign grp_fu_191_p0 = trunc_ln45_fu_246_p1;

assign grp_fu_194_p0 = tmp_1_fu_255_p3;

assign grp_fu_197_p0 = tmp_2_reg_584_pp0_iter6_reg;

assign icmp_ln38_fu_218_p2 = ((indvar_flatten_fu_112 == mul_ln12) ? 1'b1 : 1'b0);

assign icmp_ln39_fu_349_p2 = (($signed(zext_ln39_fu_345_p1) < $signed(width)) ? 1'b1 : 1'b0);

assign icmp_ln52_fu_448_p2 = ((select_ln38_1_cast_fu_380_p1 == sub22) ? 1'b1 : 1'b0);

assign lshr_ln18_fu_409_p2 = zext_ln15_fu_398_p1 >> zext_ln18_fu_405_p1;

assign mantissa_fu_389_p4 = {{{{1'd1}, {trunc_ln342_reg_639}}}, {1'd0}};

assign or_ln50_fu_506_p2 = (shl_ln50_fu_494_p2 | result_fu_488_p3);

assign output_stream_TDATA = (shl_ln50_1_fu_500_p2 | or_ln50_fu_506_p2);

assign output_stream_TKEEP = pixel_keep_reg_564_pp0_iter23_reg;

assign output_stream_TLAST = pixel_last_reg_660;

assign output_stream_TSTRB = pixel_strb_reg_569_pp0_iter23_reg;

assign pixel_last_fu_453_p2 = (icmp_ln52_fu_448_p2 & cmp21_fu_384_p2);

assign result_2_fu_483_p2 = (32'd0 - val_reg_654);

assign result_fu_488_p3 = ((xs_sign_reg_634_pp0_iter23_reg[0:0] == 1'b1) ? result_2_fu_483_p2 : val_reg_654);

assign select_ln18_fu_331_p3 = ((tmp_fu_313_p3[0:0] == 1'b1) ? sext_ln18_fu_327_p1 : add_ln317_fu_307_p2);

assign select_ln38_1_cast_fu_380_p1 = select_ln38_1_fu_372_p3;

assign select_ln38_1_fu_372_p3 = ((icmp_ln39_fu_349_p2[0:0] == 1'b1) ? col_fu_104 : 31'd0);

assign select_ln38_fu_360_p3 = ((icmp_ln39_fu_349_p2[0:0] == 1'b1) ? row_fu_108 : add_ln38_1_fu_354_p2);

assign sext_ln18_1_fu_402_p1 = $signed(select_ln18_reg_649);

assign sext_ln18_fu_327_p1 = $signed(sub_ln18_fu_321_p2);

assign shl_ln18_fu_415_p2 = zext_ln15_fu_398_p1 << zext_ln18_fu_405_p1;

assign shl_ln50_1_fu_500_p2 = result_fu_488_p3 << 32'd8;

assign shl_ln50_fu_494_p2 = result_fu_488_p3 << 32'd16;

assign sub_ln18_fu_321_p2 = (8'd127 - xs_exp_fu_291_p3);

assign tmp_1_fu_255_p3 = {{input_stream_TDATA[15:8]}};

assign tmp_3_fu_421_p4 = {{lshr_ln18_fu_409_p2[55:24]}};

assign tmp_4_fu_431_p4 = {{shl_ln18_fu_415_p2[55:24]}};

assign tmp_fu_313_p3 = add_ln317_fu_307_p2[32'd8];

assign trunc_ln342_fu_299_p1 = data_fu_280_p1[22:0];

assign trunc_ln45_fu_246_p1 = input_stream_TDATA[7:0];

assign val_fu_441_p3 = ((tmp_reg_644[0:0] == 1'b1) ? tmp_3_fu_421_p4 : tmp_4_fu_431_p4);

assign xs_exp_fu_291_p3 = {{data_fu_280_p1[30:23]}};

assign zext_ln15_fu_398_p1 = mantissa_fu_389_p4;

assign zext_ln18_fu_405_p1 = $unsigned(sext_ln18_1_fu_402_p1);

assign zext_ln317_fu_303_p1 = xs_exp_fu_291_p3;

assign zext_ln38_fu_368_p1 = select_ln38_fu_360_p3;

assign zext_ln39_fu_345_p1 = col_fu_104;

endmodule //grayscale_kernel_grayscale_kernel_Pipeline_VITIS_LOOP_38_1_VITIS_LOOP_39_2
